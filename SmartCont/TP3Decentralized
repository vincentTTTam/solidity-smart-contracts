pragma solidity ^0.4.0;

contract Quizz {

    // Variables 
    address public creator; // It is the administrator and sender
    mapping(address => candidate) candidats;
	mapping(address => string) question;
	 mapping(address => uint) correction;
	 mapping(address => uint) reponses;
struct candidate{

        address nom;

        

        uint amount; // the amount (of points)
        
        bool quizzDone;

        

    }	
	
	
	  function CreationCandidat(){

        candidate candidat;

        candidat.quizzDone=false;

        candidat.amount=0;

        candidat.nom=msg.sender;

       

    }
     function Quizz() {
        
        
    }
	
	 event SendPoints(address _creator, address _listCandidates, uint _amount);

 function reponsesCandidats(uint reponse1,uint reponse2,uint reponse3,uint reponse4,uint reponse5,uint reponse6){
    correction.push(reponse1);
        correction.push(reponse2);
        correction.push(reponse3);
        correction.push(reponse4);
        correction.push(reponse5);
        correction.push(reponse6);
   
  

       

    }	

function questionDeAdmin(string question1,string question2,string question3,string question4,string question5,string question6) isAdmin(){

     question.push(question1);
        question.push(question2);
        question.push(question3);
        question.push(question4);
        question.push(question5);
        question.push(question6);
  

       

    }	

  function VraieReponse(uint reponse1,uint reponse2,uint reponse3,uint reponse4,uint reponse5,uint reponse6) isAdmin() {
        
        correction.push(reponse1);
        correction.push(reponse2);
        correction.push(reponse3);
        correction.push(reponse4);
        correction.push(reponse5);
        correction.push(reponse6);
    }
	
	 function resultatsCandidat(){

        for (uint i=0; i< reponses.length; i++) {
            if ( candidats[msg.sender].reponses[i]==correction[i]){
                 candidats[msg.sender].amount++;
            }
            
        }

     
    }
   

    
   
    
  
    
    
    modifier isAdmin() {
        if(msg.sender != creator) {
            throw; 
            _; 
       }
    }

    
  

    
    function kill() isAdmin() { 
      suicide(msg.sender);  
    }
}